<!--
***********************************************************************************************
Linux.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- *******************************************************************************************
        Set Build Default Environment Variables
       ******************************************************************************************* -->

  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.ValidateValidArchitecture" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.CopySources" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.MultiMakeCl" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.MakeClCommandLine" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.GenerateNinja" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.Compile" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.Ld" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.Ar" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.Execute" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.RemoteClean" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.WriteRemoteTarget" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.ResolveRemoteTarget" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.ResolveRemoteDir" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.ComputeHeaders" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.RequiresRemoteConnection" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.PrepareDeploymentItems" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Tasks.ValidateCompatibleRemoteArchitectures" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  
  <ItemGroup>
    <SourcesToCopyRemotely Include="@(ClCompile);@(ClInclude);@(None)" />
    <DataFilesToCopyRemotely Include="@(Xsd);@(Resource);@(Object);@(Library);@(FxCompile);@(Image);@(Media);@(Xml);@(Text);@(Font)" />
  </ItemGroup>

  <!-- Add Link output as a consumable similar to a library. -->
  <ItemDefinitionGroup>
    <Link>
      <ImportLibrary>%(Link.OutputFile)</ImportLibrary>
      <AdditionalLibraryDirectories>$(LibraryPath);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
    </Link>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <!-- LocalRemoteCopySources is true by default, set to false for designtime. -->
    <LocalRemoteCopySources Condition="'$(DesignTimeBuild)' == 'true'">false</LocalRemoteCopySources>
    <AdditionalSourcesToCopyMapping Condition="'$(AdditionalSourcesToCopyMapping)' == ''"></AdditionalSourcesToCopyMapping>
    <CleanRemoteProjectDirectory Condition="'$(CleanRemoteProjectDirectory)' == ''">$(LocalRemoteCopySources)</CleanRemoteProjectDirectory>
    <CreateRecipeFileDependOnTargets>_RequiresRemoteConnection;_ResolveRemoteTarget;ResolveRemoteDir;_CopySources;$(CreateRecipeFileDependOnTargets)</CreateRecipeFileDependOnTargets>
    <RequiresRemoteConnectionEnabled Condition="'$(RequiresRemoteConnectionEnabled)' == ''">true</RequiresRemoteConnectionEnabled>

    <RemoteProjectDir Condition="'$(RemoteProjectDir)' == ''">$(RemoteRootDir)/$(RemoteProjectRelDir)/</RemoteProjectDir>
    <RemoteOutDir Condition="'$(RemoteOutDir)' == ''">$(RemoteRootDir)/$(RemoteOutRelDir)/</RemoteOutDir>
    <RemoteIntDir Condition="'$(RemoteIntDir)' == ''">$(RemoteRootDir)/$(RemoteIntRelDir)/</RemoteIntDir>

    <UseSSHCopy>true</UseSSHCopy>
    <RemoteDebuggerWorkingDirectory Condition="'$(RemoteDebuggerWorkingDirectory)' == '' and '$(ConfigurationType)' != 'Makefile'">$(RemoteOutDir)</RemoteDebuggerWorkingDirectory>

  </PropertyGroup>

  <Target Name="_FixupRemoteIntelliSenseIncludes" BeforeTargets="GetClCommandLines" DependsOnTargets="_ResolveRemoteTarget">
    <ComputeHeaders
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(RemoteProjectDir)"
      TargetLinuxPlatform="$(TargetLinuxPlatform)"
      WiringPiIncludePath="$(wiringPiIncludePath)"
      IncludePath="$(IncludePath)"
      LinuxIncludePath="$(LinuxIncludePath)"
      RemoteTargetId="$(ResolvedRemoteTargetId)"
      CCompiler="$(RemoteCCompileToolExe)"
      CppCompiler="$(RemoteCppCompileToolExe)"
      CStandard="%(ClCompile.CLanguageStandard)"
      CppStandard="%(ClCompile.CppLanguageStandard)"
      Sources="@(ClCompile)">
      <Output TaskParameter="TranslatedSources" ItemName="TranslatedClCompile"/>
      <Output TaskParameter="CIntelliSenseIncludePath" PropertyName="CIntelliSenseIncludePath"/>
      <Output TaskParameter="CppIntelliSenseIncludePath" PropertyName="CppIntelliSenseIncludePath"/>
    </ComputeHeaders>
    <ItemGroup>
      <ClCompile>
        <ISenseIncludeDirectories Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'">$(CIntelliSenseIncludePath)</ISenseIncludeDirectories>
        <ISenseIncludeDirectories Condition="'%(ClCompile.CompileAs)' == 'CompileAsCpp'">$(CppIntelliSenseIncludePath)</ISenseIncludeDirectories>
      </ClCompile>
      <ClCompile>
        <AdditionalIncludeDirectories Condition="'%(Identity)'!=''" >@(TranslatedClCompile->'%(AdditionalIncludeDirectories)');@(ClCompile->'%(ISenseIncludeDirectories)')</AdditionalIncludeDirectories>
      </ClCompile>
    </ItemGroup>
  </Target>

  <Target Name="GetResolvedLinkLibs" Returns="@(LibFullPath)" DependsOnTargets="$(StaticLibraryResolveLinkLib);_CopySources">
    <!-- Return Remote Paths instead of local paths.-->
    <PropertyGroup>
      <_LibFullPath Condition="'$(ConfigurationType)'=='StaticLibrary' and '%(_ResolvedNativeProjectReferencePaths.FileType)' =='lib'">@(_ResolvedNativeProjectReferencePaths)</_LibFullPath>
      <_LibFullPath Condition="'$(ConfigurationType)'=='DynamicLibrary' and '$(IgnoreImportLibrary)'!='true'">$(ResolvedTargetPath)</_LibFullPath>
      <_LibFullPath Condition="'$(ConfigurationType)'=='StaticLibrary' and '$(GetResolvedLinkLibs_Order)' == 'BreadthFirst'">$(ResolvedTargetPath);$(_LibFullPath)</_LibFullPath>
      <_LibFullPath Condition="'$(ConfigurationType)'=='StaticLibrary' and '$(GetResolvedLinkLibs_Order)' != 'BreadthFirst'">$(_LibFullPath);$(ResolvedTargetPath)</_LibFullPath>
    </PropertyGroup>
    <ItemGroup>
      <LibFullPathTemp Include="$(_LibFullPath)">
        <ProjectType>$(ConfigurationType)</ProjectType>
        <FileType>lib</FileType>
        <ResolveableAssembly>false</ResolveableAssembly>
        <TimestampSurrogate>$(LinkUpToDateFile)</TimestampSurrogate>
      </LibFullPathTemp>
      <LibFullPath Condition="'$(ConfigurationType)'!='StaticLibrary' or '$(GetResolvedLinkLibs_Order)' != 'BreadthFirst'" Include="@(LibFullPathTemp)" />
      <LibFullPath Condition="'$(ConfigurationType)'=='StaticLibrary' and '$(GetResolvedLinkLibs_Order)' == 'BreadthFirst'" Include="@(LibFullPathTemp->Reverse()->Distinct()->Reverse())" />
    </ItemGroup>
    <Message Condition="'$(_REFERENCE_DEBUG)'=='true'" Importance="High" Text="ResolvedLibPath=@(ResolvedLibPath)"/>
  </Target>

  <Target Name="_RequiresRemoteConnection" Condition="'$(RequiresRemoteConnectionEnabled)' != 'false'" DependsOnTargets="_ConsolidateSourcesToCopy" Returns="$(RequireRemoteConnection)">
    <RequiresRemoteConnection
      RemoteTarget="$(RemoteTarget)"
      CopySourcesEnabled="$(LocalRemoteCopySources)"
      ClCompile="@(ClCompile)"
      Sources ="@(FinalSourcesToCopyRemotely)"
      AdditionalSources="@(AdditionalSourcesToCopyRemotely)"
      RemoteBuildCommandLine="$(RemoteBuildCommandLine)"
      RemoteReBuildCommandLine="$(RemoteReBuildCommandLine)"
      RemoteCleanCommandLine="$(RemoteCleanCommandLine)"
      RemotePreBuildEventCommand="@(RemotePreBuildEvent->'%(Command)')"
      RemotePostBuildEventCommand="@(RemotePostBuildEvent->'%(Command)')"
      PreBuildEventEnabled="$(PreBuildEventUseInBuild)"
      PostBuildEventEnabled="$(PostBuildEventUseInBuild)"
      RemotePreBuildEventEnabled="$(RemotePreBuildEventUseInBuild)"
      RemotePostBuildEventEnabled="$(RemotePostBuildEventUseInBuild)"
      PreBuildEventAdditionalSourcesToCopy="@(PreBuildEvent->'%(AdditionalSourcesToCopyMapping)')"
      PostBuildEventAdditionalSourcesToCopy="@(PostBuildEvent->'%(AdditionalSourcesToCopyMapping)')"
      RemotePreBuildEventAdditionalSourcesToCopy="@(RemotePreBuildEvent->'%(AdditionalSourcesToCopyMapping)')"
      RemotePostBuildEventAdditionalSourcesToCopy="@(RemotePostBuildEvent->'%(AdditionalSourcesToCopyMapping)')">
      <Output TaskParameter="RequireRemoteConnection" PropertyName="RequireRemoteConnection"/>
    </RequiresRemoteConnection>
  </Target>

  <Target Name="PrepareDeploymentItems" Returns="@(DeploymentItems)" DependsOnTargets="_ValidateCompatibleRemoteArchitectures">
    <PrepareDeploymentItems
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(RemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      RemoteTarget="$(RemoteTarget)"
      RemoteDebugTarget="$(RemoteDebugTarget)"
      RemoteDebuggingTarget="$(RemoteDebuggingTarget)"
      RemoteDeployDir="$(RemoteDeployDir)"
      Outputs="@(Link);@(Lib)"
      OutputFile="$(RemoteTargetPath)"
      ClCompileItems="@(ClCompile)"
      RemoteDeployItems="@(RemoteDeploy)"
      Items="@(SourcesToCopyRemotely);@(DataFilesToCopyRemotely)">
      <Output TaskParameter="DeploymentItems" ItemName="DeploymentItems" />
    </PrepareDeploymentItems>
  </Target>
  
  <Target Name="_ResolveRemoteTarget" DependsOnTargets="_RequiresRemoteConnection">
    <ResolveRemoteTarget
      RemoteTarget="$(RemoteTarget)"
      DesignTimeBuild="$(DesignTimeBuild)"
      RequireRemoteConnection="$(RequireRemoteConnection)">
      <Output TaskParameter="ResolvedRemoteTarget" PropertyName="ResolvedRemoteTarget"/>
      <Output TaskParameter="ResolvedRemoteTargetId" PropertyName="ResolvedRemoteTargetId"/>
      <Output TaskParameter="RemoteTargetArchitecture" PropertyName="RemoteTargetArchitecture"/>
      <Output TaskParameter="RemoteTargetResolved" PropertyName="RemoteTargetResolved"/>
    </ResolveRemoteTarget>
  </Target>

  <Target Name="_ResolveRemoteDebuggingTarget" DependsOnTargets="_RequiresRemoteConnection">
    <ResolveRemoteTarget
      RemoteTarget="$(RemoteDebuggingTarget)"
      DefaultRemoteTarget="$(RemoteTarget)"
      DesignTimeBuild="$(DesignTimeBuild)"
      RequireRemoteConnection="$(RequireRemoteConnection)">
      <Output TaskParameter="ResolvedRemoteTarget" PropertyName="ResolvedRemoteDebuggingTarget"/>
      <Output TaskParameter="ResolvedRemoteTargetId" PropertyName="ResolvedRemoteDebuggingTargetId"/>
      <Output TaskParameter="RemoteTargetArchitecture" PropertyName="RemoteDebuggingTargetArchitecture"/>
      <Output TaskParameter="RemoteTargetResolved" PropertyName="RemoteDebuggingTargetResolved"/>
    </ResolveRemoteTarget>
  </Target>

  <Target Name="ResolveRemoteDir" Condition="'$(DesignTimeBuild)' != 'true'" DependsOnTargets="_PrepareUpToDateChecks;_RequiresRemoteConnection">
    <ResolveRemoteDir Condition="'$(RequireRemoteConnection)' == 'true'"
      RemoteProjectDir="$(RemoteProjectDir)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      ProjectDir="$(ProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(RemoteOutDir)"
      RemoteIntermediateDir="$(RemoteIntDir)"
      RemoteProjectDirFile="$(RemoteProjectDirFile)"
      RequireRemoteConnection="$(RequireRemoteConnection)"
      UseSSHCopy="$(UseSSHCopy)">
      <Output TaskParameter="ResolvedRemoteProjectDir" PropertyName="_ResolvedRemoteProjectDir"/>
      <Output TaskParameter="ResolvedRemoteIntermediateDir" PropertyName="_ResolvedRemoteIntermediateDir"/>
      <Output TaskParameter="ResolvedRemoteOutputDir" PropertyName="_ResolvedRemoteOutputDir"/>
    </ResolveRemoteDir>
  </Target>

  <Target Name="_ValidateValidArchitecture" DependsOnTargets="_ResolveRemoteDebuggingTarget;_RequiresRemoteConnection">
    <ValidateValidArchitecture Condition="'$(ValidateArchitecture)' != 'False' and '$(RequireRemoteConnection)' == 'true'"
      Platform="$(Platform)"
      RemoteTarget="$(ResolvedRemoteDebuggingTarget)"
      FailOnInvalidArchitecture="false"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(RemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(RemoteOutDir)"
      RemoteIntermediateDir="$(RemoteIntDir)"/>
  </Target>

  <Target Name="_ValidateCompatibleRemoteArchitectures">
    <ValidateCompatibleRemoteArchitectures
      FailedMessage="ValidateValidArchitectureStatic.Mismatch"
      FailOnInvalidArchitecture="false"
      SourceMachine="$(RemoteTarget)"
      TargetMachine="$(RemoteDebuggingTarget)"/>
  </Target>

  <Target Name="_WriteRemoteTarget" DependsOnTargets="_ResolveRemoteTarget">
    <WriteRemoteTarget
      RemoteTarget="$(ResolvedRemoteTarget)"
      LastRemoteTargetFile="$(LastRemoteTargetFile)"/>
  </Target>

  <Target Name="_PrepareUpToDateChecks" DependsOnTargets="_ResolveRemoteTarget">
    <PropertyGroup>
      <CopySourcesUpToDateFile>$(IntDir)$(ResolvedRemoteTargetId).CopySourcesUpToDateFile.tlog</CopySourcesUpToDateFile>
      <CompileUpToDateFile>$(IntDir)$(ResolvedRemoteTargetId).CompileUpToDateFile.tlog</CompileUpToDateFile>
      <LinkUpToDateFile>$(IntDir)$(ResolvedRemoteTargetId).LinkUpToDateFile.tlog</LinkUpToDateFile>
      <RemoteProjectDirFile>$(IntDir)$(ResolvedRemoteTargetId).RemoteProjectDirFile.tlog</RemoteProjectDirFile>
    </PropertyGroup>
  </Target>

  <Target Name="_CopySources" DependsOnTargets="_ConsolidateSourcesToCopy;_PrepareUpToDateChecks;_ValidateSources;_ResolveRemoteTarget;_RequiresRemoteConnection" >
    <CopySources Condition="'$(LocalRemoteCopySources)' != 'false' and '$(RequireRemoteConnection)' == 'true' and '$(ResolvedRemoteTarget)' != ''"
      Sources="@(FinalSourcesToCopyRemotely)"
      AdditionalSources="@(AdditionalSourcesToCopyRemotely)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(RemoteProjectDir)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(RemoteOutDir)"
      RemoteIntermediateDir="$(RemoteIntDir)"
      RemoteProjectDirFile="$(RemoteProjectDirFile)"
      UpToDateFile="$(CopySourcesUpToDateFile)"
      LocalRemoteCopySources="$(LocalRemoteCopySources)"
      ProjectPublicIncludePath="$(ProjectPublicIncludePath)"
      LocalTargetPath="$(TargetPath)"
      UseSSHCopy="$(UseSSHCopy)">
      <Output TaskParameter="ResolvedRemoteProjectDir" PropertyName="_ResolvedRemoteProjectDir" />
      <Output TaskParameter="ResolvedProjectPublicIncludePath" PropertyName="RemoteIncludePath" />
      <Output TaskParameter="ResolvedTargetPath" PropertyName="ResolvedTargetPath" />
    </CopySources>
  </Target>

  <Target Name="_Compile" Condition="'@(ClCompile)' != ''" DependsOnTargets="SelectClCompile">
    <_Compile
      Sources="@(ClCompile)"
      ObjectFileName="%(ClCompile.ObjectFileName)"
      DebugInformationFormat="%(ClCompile.DebugInformationFormat)"
      TreatWarningAsError="%(ClCompile.TreatWarningAsError)"
      Verbose="%(ClCompile.Verbose)" />
  </Target>

  <Target Name="_SelectClCompile" DependsOnTargets="SelectClCompile">
    <ItemGroup Condition="'@(SelectedFiles)'!=''">
      <SourcesToCopyRemotely Remove="@(SourcesToCopyRemotely)" Condition="'%(Identity)' != '@(SelectedFiles)'"/>
      <DataFilesToCopyRemotely Remove="@(DataFilesToCopyRemotely)" Condition="'%(Identity)' != '@(SelectedFiles)'"/>
    </ItemGroup>
    <PropertyGroup>
      <CleanRemoteProjectDirectory Condition="'@(SelectedFiles)'!=''">false</CleanRemoteProjectDirectory>
      <AdditionalSourcesToCopyMapping Condition="'@(SelectedFiles)'!=''"></AdditionalSourcesToCopyMapping>
    </PropertyGroup>
  </Target>

  <Target Name="_AssignProjectReferencesPlatformType">
    <ItemGroup>
      <_MSBuildProjectReferenceExistent Include="@(_MSBuildProjectReferenceExistent)">
        <ProjectApplicationType>Linux</ProjectApplicationType>
      </_MSBuildProjectReferenceExistent>
    </ItemGroup>
  </Target>

  <Target Name="_RemoteClean" DependsOnTargets="ResolveRemoteDir;_RequiresRemoteConnection">
    <ItemGroup>
      <Link Include="CleanLinkPlaceholder" />
    </ItemGroup>
    <ItemGroup>
      <CompileSources Include="@(ClCompile)" Condition="'%(ClCompile.ExcludedFromBuild)' != 'true'" />
    </ItemGroup>
    <RemoteClean Condition="'$(CleanRemoteProjectDirectory)' != 'false' and '$(RequireRemoteConnection)' == 'true' and '@(CleanRemoteClCompile)' != ''"
      RemoteTarget="$(ResolvedRemoteTarget)"
      RemoteProjectDir="$(RemoteProjectDir)"
      ProjectDir="$(ProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      CleanRemoteClCompile="@(CleanRemoteClCompile)"
      LinkItems="@(Link)"
      IsCopySourcesEnabled="$(LocalRemoteCopySources)"
      SourcePaths="@(ClCompile->'%(Fullpath)')"/>
    <ItemGroup>
      <Link Remove="CleanLinkPlaceholder"/>
    </ItemGroup>
  </Target>

  <!-- *******************************************************************************************
        Compile/Link targets and tasks
       ******************************************************************************************* -->

  <PropertyGroup>
    <BeforeBuildCompileTargets>
      $(BeforeBuildCompileTargets);
      _PrepareForClCompile;
    </BeforeBuildCompileTargets>

    <BuildLinkTargets>
      $(BuildLinkTargets);
    </BuildLinkTargets>

    <AfterBuildLinkTargets>
      RemotePostBuildEvent
      $(AfterBuildLinkTargets);
      _WriteRemoteTarget;
    </AfterBuildLinkTargets>

    <!-- Add the RemoteClean target to the clean target chain -->
    <CppCleanDependsOn>
      $(CppCleanDependsOn);
      _RemoteClean;
    </CppCleanDependsOn>

    <BuildGenerateSourcesTargets>
      $(BuildGenerateSourcesTargets);
      RemotePreBuildEvent;
    </BuildGenerateSourcesTargets>

    <RemoteTargetPath Condition="'$(RemoteTargetPath)' == ''">$(RemoteOutDir)/$(TargetName)$(TargetExt)</RemoteTargetPath>
    <RemoteDebuggerCommand Condition="'$(RemoteDebuggerCommand)' == ''">$(RemoteTargetPath)</RemoteDebuggerCommand>
  </PropertyGroup>

  <Target Name="_Link" DependsOnTargets="$(BeforeLinkTargets);$(ComputeLinkInputsTargets);ComputeManifestInputsTargets;ManifestResourceCompile;PrepareResourceNames;MakeDirsForLink;DoLinkOutputFilesMatch;PreLinkEvent;RemotePreLinkEvent;Link;ComputeLinkImportLibraryOutputsForClean;$(AfterLinkTargets)" Condition="'$(LinkCompiled)' == 'true'">
  </Target>

  <Target Name="DoLinkOutputFilesMatch">
  </Target>

  <Target Name="_PrepareForClCompile" DependsOnTargets="PrepareDeploymentItems">
  </Target>

  <Target Name="FixupCLCompileOptions" Condition="'@(ClCompile)' != ''">
    <ItemGroup>
      <ClCompile>
        <!--<ClangForcedIncludeFiles>%(ClCompile.ForcedIncludeFiles)</ClangForcedIncludeFiles>-->
        <PrecompiledHeaderFile Condition="'%(ClCompile.PrecompiledHeader)' != 'Use'"></PrecompiledHeaderFile>
        <!--<MinimalRebuildFromTracking Condition="'$(_BuildActionType)' != 'Build' or '$(ForceRebuild)' == 'true'">false</MinimalRebuildFromTracking>-->
        <WarningLevel Condition="'%(WarningLevel)' == 'Level1' or '%(WarningLevel)' == 'Level2' or '%(WarningLevel)' == 'Level3'">EnableAllWarnings</WarningLevel>
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.c'">CompileAsC</CompileAs>
      </ClCompile>

      <ClCompile>
        <!-- Still unknown extension, assume C++ -->
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'Default'">CompileAsCpp</CompileAs>
      </ClCompile>

      <ClCompile>
        <!-- Only Pass C++ standard to Cpp files -->
        <!-- C/ObjC share the same standard, and C++/ObjC++ share the same standard -->
        <CLanguageStandard Condition="'%(ClCompile.CompileAs)' == 'CompileAsCpp'"></CLanguageStandard>
        <CppLanguageStandard Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'"></CppLanguageStandard>
        <!-- GCC does not allow Wno-pointer-sign for C++ -->
        <CAdditionalWarning Condition="'%(ClCompile.CompileAs)' == 'CompileAsCpp'"></CAdditionalWarning>
        <CppAdditionalWarning Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'"></CppAdditionalWarning>
      </ClCompile>

      <ClCompile>
        <RemoteCompileToolExe Condition="'%(ClCompile.CompileAs)' == 'CompileAsCpp'">$(RemoteCppCompileToolExe)</RemoteCompileToolExe>
        <RemoteCompileToolExe Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'">$(RemoteCCompileToolExe)</RemoteCompileToolExe>
      </ClCompile>

      <ClCompile>
        <ThreadSafeStatics Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'" />
        <RuntimeTypeInfo Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'" />
      </ClCompile>
    </ItemGroup>

    <PropertyGroup>
      <MultiProcBuild Condition="'$(MultiProcBuild)' == '' and '$(MultiProcNumber)' != ''" >true</MultiProcBuild>
    </PropertyGroup>
  </Target>

  <Target Name="ClCompile" Condition="'@(ClCompile)' != ''" DependsOnTargets="_SelectClCompile;_ValidateValidArchitecture;_PrepareUpToDateChecks;_CopySources;_ResolveRemoteTarget;ResolveRemoteDir">
    <MultiMakeCl Condition="'%(ClCompile.ExcludedFromBuild)'!='true'"
      Sources="@(ClCompile)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      ImportedProjects="$(MSBuildAllProjects)"
      IncludePath="$(IncludePath)"
      EnableASAN="$(EnableASAN)">
      <Output TaskParameter="RemoteClCompile" ItemName="RemoteClCompile"/>
    </MultiMakeCl>

    <GenerateNinja Condition="'@(RemoteClCompile)' != '' and '$(EnableIncrementalBuild)' == 'WithNinja'"
      OutputFile="$(NinjaOutputFile)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      RemoteClCompile="@(RemoteClCompile)"
      MultiProcBuild="$(MultiProcBuild)"
      MultiProcNumber="$(MultiProcNumber)"
      CopyObjectFiles="$(RemoteCompileLocalCopyObjectFiles)"
      UpToDateFile="$(CompileUpToDateFile)"
      Timeout="$(RemoteCompileCommandTimeout)"
      ClInclude="@(ClInclude)">
      <Output TaskParameter="RemoteLink" ItemName="RemoteLink"/>
      <Output TaskParameter="IsCompileUpToDate" PropertyName="IsCompileUpToDate"/>
    </GenerateNinja>

    <Compile Condition="'@(RemoteClCompile)' != '' and '$(EnableIncrementalBuild)' == 'No'"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      RemoteClCompile="@(RemoteClCompile)"
      ClInclude="@(ClInclude)"
      UpToDateFile="$(CompileUpToDateFile)"
      Timeout="$(RemoteCompileCommandTimeout)"
      CopyObjectFiles="$(RemoteCompileLocalCopyObjectFiles)"
      MultiProcBuild="$(MultiProcBuild)"
      MultiProcNumber="$(MultiProcNumber)">
      <Output TaskParameter="RemoteLink" ItemName="RemoteLink"/>
      <Output TaskParameter="IsCompileUpToDate" PropertyName="IsCompileUpToDate"/>
    </Compile>

    <WriteLinesToFile Overwrite="true" Encoding="Unicode" File="$(TLogLocation)\compile.read.1.tlog" Lines="@(ClCompile->'^%(Fullpath)');@(ClInclude->'^%(fullpath)')" />

    <!-- The following new line is intentional. -->
    <WriteLinesToFile Overwrite="true" Encoding="Unicode" File="$(TLogLocation)\compile.write.1.tlog" Lines="@(ClCompile->'^%(Fullpath)
$(CompileUpToDateFile)')" />
  </Target>

  <Target Name="Link" DependsOnTargets="_PrepareUpToDateChecks;_ResolveRemoteTarget;ResolveRemoteDir;_ExtractSharedLibraryReferences">
    <ItemGroup>
      <Link>
        <TimestampSurrogate Condition="'%(Link.TimestampSurrogate)' == ''">$(CompileUpToDateFile)</TimestampSurrogate>
      </Link>
    </ItemGroup>

    <Ld Condition="'@(Link)' != ''"
      ProjectDir="$(ProjectDir)"
      ProjectFileName="$(ProjectFileName)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      Sources="@(Link)"
      OutputFile="%(Link.OutputFile)"
      ShowProgress="%(Link.ShowProgress)"
      Version="%(Link.Version)"
      VerboseOutput="%(Link.VerboseOutput)"
      Trace="%(Link.Trace)"
      TraceSymbols="%(Link.TraceSymbols)"
      PrintMap="%(Link.PrintMap)"
      UnresolvedSymbolReferences="%(Link.UnresolvedSymbolReferences)"
      OptimizeForMemory="%(Link.OptimizeForMemory)"
      SharedLibrarySearchPath="%(Link.SharedLibrarySearchPath)"
      AdditionalLibraryDirectories="%(Link.AdditionalLibraryDirectories);@(SharedLibraryDirectories)"
      IgnoreSpecificDefaultLibraries="%(Link.IgnoreSpecificDefaultLibraries)"
      IgnoreDefaultLibraries="%(Link.IgnoreDefaultLibraries)"
      AdditionalDependencies="%(Link.AdditionalDependencies)"
      ForceUndefineSymbolReferences="%(Link.ForceUndefineSymbolReferences)"
      LibraryDependencies="%(Link.LibraryDependencies);@(SharedLibrarySources)"
      DebuggerSymbolInformation="%(Link.DebuggerSymbolInformation)"
      GenerateMapFile="%(Link.GenerateMapFile)"
      Relocation="%(Link.Relocation)"
      FunctionBinding="%(Link.FunctionBinding)"
      NoExecStackRequired="%(Link.NoExecStackRequired)"
      LinkDLL="%(Link.LinkDLL)"
      WholeArchiveBegin="%(Link.WholeArchiveBegin)"
      AdditionalOptions="%(Link.AdditionalOptions)"
      WholeArchiveEnd="%(Link.WholeArchiveEnd)"
      RemoteToolExe="$(RemoteLdToolExe)"
      Timeout="$(RemoteLdCommmandTimeout)"
      UpToDateFile="$(LinkUpToDateFile)"
      IsCompileUpToDate="$(IsCompileUpToDate)"
      EnableASAN="$(EnableASAN)"
      UseOfStl="$(UseOfStl)"
      CopyOutputFile="$(RemoteLinkLocalCopyOutput)">
      <Output TaskParameter="RemoteTargetPath" ItemName="RemoteTargetPath"/>
    </Ld>

    <WriteLinesToFile Overwrite="true" Condition="'@(ProjectReferenceToLink->HasMetadata(TimestampSurrogate))' != ''" Encoding="Unicode" File="$(TLogLocation)\link.read.1.tlog" Lines="@(Link->'^%(Fullpath)','|');@(ProjectReferenceToLink->'%(TimestampSurrogate)'->Distinct())" />

    <WriteLinesToFile Overwrite="true" Encoding="Unicode" File="$(TLogLocation)\link.write.1.tlog" Lines="@(Link->'^%(Fullpath)','|');$(LinkUpToDateFile)" />
  </Target>

  <Target Name="Lib" DependsOnTargets="_PrepareUpToDateChecks;_ResolveRemoteTarget;ResolveRemoteDir">
    <ItemGroup>
      <Lib>
        <TimestampSurrogate Condition="'%(Lib.TimestampSurrogate)' == ''">$(CompileUpToDateFile)</TimestampSurrogate>
      </Lib>
    </ItemGroup>

    <Ar Condition="'@(Lib)' != ''"
      ProjectDir="$(ProjectDir)"
      ProjectFileName="$(ProjectFileName)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      Sources="@(Lib)"
      Command="%(Lib.Command)"
      CreateIndex="%(Lib.CreateIndex)"
      CreateThinArchive="%(Lib.CreateThinArchive)"
      NoWarnOnCreate="%(Lib.NoWarnOnCreate)"
      TruncateTimestamp="%(Lib.TruncateTimestamp)"
      SuppressStartupBanner="%(Lib.SuppressStartupBanner)"
      Verbose="%(Lib.Verbose)"
      OutputFile="%(Lib.OutputFile)"
      RemoteToolExe="$(RemoteArToolExe)"
      AdditionalOptions="%(Lib.AdditionalOptions)"      
      Timeout="$(RemoteArCommmandTimeout)"
      UpToDateFile="$(LinkUpToDateFile)"
      IsCompileUpToDate="$(IsCompileUpToDate)"
      CopyOutputFile="$(RemoteLinkLocalCopyOutput)">
    </Ar>

    <WriteLinesToFile Overwrite="true" Condition="'@(ProjectReferenceToLink->HasMetadata(TimestampSurrogate))' != ''" Encoding="Unicode" File="$(TLogLocation)\Lib.read.1.tlog" Lines="@(Lib->'^%(Fullpath)','|');@(ProjectReferenceToLink->'%(TimestampSurrogate)'->Distinct())" />

    <WriteLinesToFile Overwrite="true" Encoding="Unicode" File="$(TLogLocation)\lib.write.1.tlog" Lines="@(Lib->'^%(Fullpath)');$(LinkUpToDateFile)" />
  </Target>

  <Target Name="PreBuildEvent" Condition="'$(PreBuildEventUseInBuild)'!='false'" DependsOnTargets="_ResolveRemoteTarget;ResolveRemoteDir;_RequiresRemoteConnection">
    <Message Text="Description: %(PreBuildEvent.Message)" Condition="'%(PreBuildEvent.Message)' != '' and '%(PreBuildEvent.Command)' != ''"/>
    <Exec Command="%(PreBuildEvent.Command)$(_BuildSuffix)" Condition="'%(PreBuildEvent.Command)' != ''"/>
    <Execute Condition="'%(PreBuildEvent.AdditionalSourcesToCopyMapping)' != '' and '$(RequireRemoteConnection)' == 'true'"
      RemoteTarget="$(ResolvedRemoteTarget)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      LocalFilesToCopyRemotelyMapping="%(PreBuildEvent.AdditionalSourcesToCopyMapping)"
      Timeout="$(RemoteExecuteTimeout)"
      RequireRemoteConnection="$(RequireRemoteConnection)">
    </Execute>
  </Target>

  <Target Name="PreLinkEvent" Condition="'$(PreLinkEventUseInBuild)'!='false'" DependsOnTargets="_ResolveRemoteTarget;ResolveRemoteDir;_RequiresRemoteConnection">
    <Message Text="Description: %(PreLinkEvent.Message)" Condition="'%(PreLinkEvent.Message)' != '' and '%(PreLinkEvent.Command)' != ''"/>
    <Exec Command="%(PreLinkEvent.Command)$(_BuildSuffix)" Condition="'%(PreLinkEvent.Command)' != ''"/>
    <Execute Condition="'%(PreLinkEvent.AdditionalSourcesToCopyMapping)' != '' and '$(RequireRemoteConnection)' == 'true'"
      RemoteTarget="$(ResolvedRemoteTarget)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      LocalFilesToCopyRemotelyMapping="%(PreLinkEvent.AdditionalSourcesToCopyMapping)"
      Timeout="$(RemoteExecuteTimeout)"
      RequireRemoteConnection="$(RequireRemoteConnection)">
    </Execute>
  </Target>

  <Target Name="PostBuildEvent" AfterTargets="RemotePostBuildEvent"  Condition="'$(PostBuildEventUseInBuild)'!='false'" DependsOnTargets="_ResolveRemoteTarget;ResolveRemoteDir;_RequiresRemoteConnection">
    <Message Text="Description: %(PostBuildEvent.Message)" Condition="'%(PostBuildEvent.Message)' != '' and '%(PostBuildEvent.Command)' != ''"/>
    <Exec Command="%(PostBuildEvent.Command)$(_BuildSuffix)" Condition="'%(PostBuildEvent.Command)' != ''"/>
    <Execute Condition="'%(PostBuildEvent.AdditionalSourcesToCopyMapping)' != '' and '$(RequireRemoteConnection)' == 'true'"
      RemoteTarget="$(ResolvedRemoteTarget)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      LocalFilesToCopyRemotelyMapping="%(PostBuildEvent.AdditionalSourcesToCopyMapping)"
      Timeout="$(RemoteExecuteTimeout)"
      RequireRemoteConnection="$(RequireRemoteConnection)">
    </Execute>
  </Target>

  <Target Name="RemotePreBuildEvent" Condition="'$(RemotePreBuildEventUseInBuild)' != 'false'" DependsOnTargets="_ResolveRemoteTarget;ResolveRemoteDir;_RequiresRemoteConnection;_CopySources">
    <Message Text="Description: %(RemotePreBuildEvent.Message)" Condition="'%(RemotePreBuildEvent.Message)' != '' and '%(RemotePreBuildEvent.Command)' != ''"/>
    <Execute Condition="('%(RemotePreBuildEvent.Command)' != '' or '%(RemotePreBuildEvent.AdditionalSourcesToCopyMapping)' != '') and '$(RequireRemoteConnection)' == 'true'"
      Command="%(RemotePreBuildEvent.Command)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      RemoteFilesToCopyLocallyMapping="%(RemotePreBuildEvent.AdditionalSourcesToCopyMapping)"
      Timeout="$(RemoteExecuteTimeout)"
      RequireRemoteConnection="$(RequireRemoteConnection)">
    </Execute>
  </Target>

  <Target Name="RemotePreLinkEvent" Condition="'$(RemotePreLinkEventUseInBuild)' != 'false'" DependsOnTargets="_ResolveRemoteTarget;ResolveRemoteDir;_RequiresRemoteConnection">
    <Message Text="Description: %(RemotePreLinkEvent.Message)" Condition="'%(RemotePreLinkEvent.Message)' != '' and '%(RemotePreLinkEvent.Command)' != ''"/>
    <Execute Condition="('%(RemotePreLinkEvent.Command)' != '' or '%(RemotePreLinkEvent.AdditionalSourcesToCopyMapping)' != '') and '$(RequireRemoteConnection)' == 'true'"
      Command="%(RemotePreLinkEvent.Command)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      RemoteFilesToCopyLocallyMapping="%(RemotePreLinkEvent.AdditionalSourcesToCopyMapping)"
      Timeout="$(RemoteExecuteTimeout)"
      RequireRemoteConnection="$(RequireRemoteConnection)">
    </Execute>
  </Target>

  <Target Name="RemotePostBuildEvent" Condition="'$(RemotePostBuildEventUseInBuild)' != 'false'" DependsOnTargets="_ResolveRemoteTarget;ResolveRemoteDir;_RequiresRemoteConnection">
    <Message Text="Description: %(RemotePostBuildEvent.Message)" Condition="'%(RemotePostBuildEvent.Message)' != '' and '%(RemotePostBuildEvent.Command)' != ''"/>
    <Execute Condition="('%(RemotePostBuildEvent.Command)' != '' or '%(RemotePostBuildEvent.AdditionalSourcesToCopyMapping)' != '') and '$(RequireRemoteConnection)' == 'true'"
      Command="%(RemotePostBuildEvent.Command)"
      RemoteTarget="$(ResolvedRemoteTarget)"
      ProjectDir="$(ProjectDir)"
      RemoteProjectDir="$(_ResolvedRemoteProjectDir)"
      IntermediateDir="$(IntDir)"
      OutputDir ="$(OutDir)"
      RemoteOutputDir="$(_ResolvedRemoteOutputDir)"
      RemoteIntermediateDir="$(_ResolvedRemoteIntermediateDir)"
      RemoteFilesToCopyLocallyMapping="%(RemotePostBuildEvent.AdditionalSourcesToCopyMapping)"
      Timeout="$(RemoteExecuteTimeout)"
      RequireRemoteConnection="$(RequireRemoteConnection)">
    </Execute>
  </Target>

  <!-- Designtime definitions -->
  <!-- Property pages -->
  <ItemGroup>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\general_linux.xml">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(VCTargetsPath)$(LangID)\folder.xml">
      <Context>File;BrowseObject</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\directories_linux.xml"/>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\remote_gcc_linux.xml"/>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\remote_ld_linux.xml" />
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\remote_ar_linux.xml" />
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\remote_build_events.xml" />
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\remote_copy_sources_file.xml">
      <Context>File</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\remote_copy_sources.xml"/>
  </ItemGroup>

  <!-- Property pages -->
  <ItemGroup>
    <!-- Unique items for the project -->
    <CustomBuildStep Include="$(ProjectName)" />
    <PreBuildEvent Include="$(ProjectName)" />
    <PreLinkEvent Include="$(ProjectName)" />
    <PostBuildEvent Include="$(ProjectName)" />
    <RemotePreBuildEvent Include="$(ProjectName)" />
    <RemotePreLinkEvent Include="$(ProjectName)" />
    <RemotePostBuildEvent Include="$(ProjectName)" />

    <!-- Tools that show up in the IDE property pages for Link/Lib -->
    <ProjectTools Condition="'$(ConfigurationType)' == 'Application' or '$(ConfigurationType)' == 'DynamicLibrary'" Include="Link" />
    <ProjectTools Condition="'$(ConfigurationType)' == 'StaticLibrary'" Include="Lib" />
    <ProjectTools Include="CustomBuildStep" />
  </ItemGroup>

  <ItemGroup>
    <ProjectCapability Include="LinuxNative"/>
    <ProjectCapability Include="LinuxRemoteNative"/>
    <ProjectCapability Include="LinuxRemoteNativeUpToDate"/>
  </ItemGroup>

  <PropertyGroup>
    <DetermineProjectTypeTargets>_SetLinuxISenseIdentifier;$(DetermineProjectTypeTargets)</DetermineProjectTypeTargets>
  </PropertyGroup>

  <Target Name="_SetLinuxISenseIdentifier">
    <PropertyGroup>
      <ToolsetISenseIdentifier Condition="'$(Platform)' != 'ARM64'">Linux;$(IntDir)iconfig.json</ToolsetISenseIdentifier>
      <ToolsetISenseIdentifier Condition="'$(Platform)' == 'ARM64'">Linux.x64;$(IntDir)iconfig.json*</ToolsetISenseIdentifier>
    </PropertyGroup>
  </Target>


  <Import Project="$(MSBuildThisFileDirectory)\Linux.Common.targets" />
</Project>
